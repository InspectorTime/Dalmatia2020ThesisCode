## This code provides 2d graphs which show temporal distribution of the uploads within the year. 
## The graphs show data in 24 fields for each month, aka each hour is represented by a field
## The line by the side shows relative counts for each month

def normalize(arr):
    
    sum_rows = np.sum(arr,axis=1)
    
    arr_norm = np.zeros(arr.shape,dtype=np.float)
    for index, x in np.ndenumerate(arr):
        irow, icol = index
        arr_norm[irow,icol] = x/sum_rows[irow]
        
    return arr_norm





for year in range(2009,2019): # 2019
    df_photos_year = df_photos[df_photos['year']==year]
    arr = np.zeros((12,24),dtype=np.int)
    
    # filling array
    for index, row in df_photos_year.iterrows():
        date = datetime.strptime(row['taken'], '%Y-%m-%d %H:%M:%S')
        month = date.month
        hour = date.hour
        arr[month-1,hour] = arr[month-1,hour] + 1
        
    sum_months = np.sum(arr,axis=1)
    sum_hours = np.sum(arr,axis=0)
    
    total = np.sum(sum_months)
    rel_months = [100/total*sum_month for sum_month in sum_months]

    # arr_norm = normalize(arr)

    fig = plt.figure(figsize=(16, 6)) 
    gs = mpl.gridspec.GridSpec(1, 3, width_ratios=[24, 8, 1]) 
    fontsize = 16
    plt.rcParams.update({'font.size': fontsize})
    fig.subplots_adjust(hspace=0.1, wspace=0.08)

    ax0 = plt.subplot(gs[0])
    ax1 = plt.subplot(gs[1])
    ax2 = plt.subplot(gs[2])

    cmap = mpl.cm.get_cmap('YlGn')
    im = ax0.imshow(arr,cmap=cmap)
    im.set_clim([0,200])
    ax0.set_yticks(range(12))
    ax0.set_yticklabels(['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'])
    xticks = np.arange(-.5,24,4)
    xticklabels = [f'{int(tick+0.5)}:00' for tick in xticks]
    ax0.set_xticks(xticks)
    ax0.set_xticklabels(xticklabels)
    ax0.set_title(f'Tourist Flickr photos daytime distribution {year}')
    fig.colorbar(im, cax=ax2, orientation='vertical')



    ax1.plot(rel_months,range(len(rel_months),0,-1),'o-',color='k')
    xmin, xmax = 0, 30
    ax1.set_xlim([xmin,xmax])
    xticks = np.arange(xmin,xmax+1,10)
    xlabels = [f'{xtick}%' for xtick in xticks]
    
    ax1.set_xticks(xticks)
    ax1.set_xticklabels(xlabels)
    ax1.spines['right'].set_visible(False)
    ax1.spines['left'].set_visible(False)
    ax1.spines['bottom'].set_visible(False)
    ax1.set_yticks([])
    ax1.xaxis.tick_top()

    
    plt.savefig(f'plots/daytime_{year}.png',dpi=300,bbox_inches='tight')
    plt.show()
